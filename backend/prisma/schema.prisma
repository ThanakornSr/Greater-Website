generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  user_id         String            @id @default(uuid())
  first_name      String
  last_name       String
  password        String
  email           String            @unique
  user_image      String?
  info            String?
  phone           String?
  address         String?
  role            Role              @default(Student)
  comment         Comments[]        @relation("user_comment")
  payment         Payment[]         @relation("payment")
  paymetn_history Payment_history[] @relation("payment_history")
  enroll          Enroll[]          @relation("student_enrollments")
}

model Course {
  course_id    String            @id @default(uuid())
  title        String
  category_id  String
  description  String?           @db.Text
  info         String?           @db.Text
  price        Int
  level        String
  certificate  Boolean
  lesson       Int
  amount       Int               @default(0)
  start_date   DateTime
  end_date     DateTime
  createAt     DateTime          @default(now())
  course_image String?
  category     Category          @relation(fields: [category_id], references: [category_id], onDelete: Cascade)
  comments     Comments[]
  payment      Payment_history[] @relation("payment_course")
  enrolled     Enroll[]          @relation("course_enrollments")
}

model Category {
  category_id     String   @id @default(uuid())
  category_name   String
  category_detail String   @default("No detail") @db.Text
  category_color  String   @default("#E99F30")
  Course          Course[]
}

model Comments {
  comment_id   String   @id @default(uuid())
  content      String
  user_id      String
  course_id    String
  comment_date DateTime @default(now())

  course Course @relation(fields: [course_id], references: [course_id], onDelete: Cascade)
  user   Users  @relation("user_comment", fields: [user_id], references: [user_id], onDelete: Cascade)
}

model Enroll {
  user_id     String
  course_id   String
  enroll_date DateTime @default(now())

  course Course @relation("course_enrollments", fields: [course_id], references: [course_id], onDelete: Cascade)
  users  Users  @relation("student_enrollments", fields: [user_id], references: [user_id], onDelete: Cascade)

  @@id([user_id, course_id])
}

model Payment {
  cc_id         String   @id @default(uuid())
  user_id       String
  cc_number     String
  cc_ccv        String
  cc_expiry     String
  cc_first_name String
  cc_last_name  String
  cc_type       String
  address       String
  createdAt     DateTime @default(now())
  users         Users    @relation("payment", fields: [user_id], references: [user_id], onDelete: Cascade)
}

model Payment_history {
  payment_history_id String   @id @default(uuid())
  user_id            String
  course_id          String
  summary            Int
  first_name         String
  last_name          String
  phone              String
  email              String
  createdAt          DateTime @default(now())
  users              Users    @relation("payment_history", fields: [user_id], references: [user_id], onDelete: Cascade)
  course             Course   @relation("payment_course", fields: [course_id], references: [course_id], onDelete: Cascade)
}

enum Role {
  Student
  Admin
}
